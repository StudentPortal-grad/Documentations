// link for schema to visual diagram: https://dbdiagram.io/d/676f31765406798ef7cae76c

Table users {
  id ObjectId [pk, unique]
  name String
  email String [unique]
  password String
  role String [note: "Global role: 'Student', 'Faculty', 'Admin'"]
  profile JSONB [note: "Embedded object with optional bio, interests, profile_picture, dob, contact"]
  addresses JSONB [note: "Array of embedded objects with street, city, country"]
  friends JSONB [note: "Array of friend objects with references to users and DMs (MessageId, newest first)"]
  level Int [note: "Enum: 1, 2, 3, 4, 5 (5 => graduated)"]
  gpa Float
  universityEmail String
  mfa_settings JSONB [note: "Embedded object with enabled flag and methods array"]
  dashboards JSONB [note: "Embedded object with academic_progress, event_stats"]
  confirmEmail Boolean
  otp JSONB [note: "Embedded object with code and expiresAt"]
  roles JSONB [note: "Array of community-specific roles"]
  status String [note: "Values: 'online', 'offline'"]
  createdAt DateTime
  updatedAt DateTime

  indexes {
    email [unique, name: 'email_index']
  }
}
/*
// Embedded Friends Structure in Users
friends: [
    {
      friend ObjectId, 
      dm [ObjectId],   // Array of message IDs in the DM conversation (newest first)
      status [note: "Enum: accepted|pending"], 
      addedAt DateTime
    }
  ]
*/

Table events {
  id ObjectId [pk, unique]
  title String 
  description String
  date_time DateTime 
  location String
  capacity Int [note: "Optional"]
  creator ObjectId [ref: > users.id]
  attendees ObjectId[] [ref: > users.id]
  recommendations ObjectId[] [ref: > events.id]

  indexes {
    date_time [name: 'date_time_index']
    (creator, date_time) [type: btree, note: 'Composite index on creator and date']
  }
}

Table resources {
  id ObjectId [pk, unique]
  title String 
  description String
  uploaded_by ObjectId [ref: > users.id]
  file_url String
  tags String[] [note: "Optional"]
  interactions JSONB [note: "Embedded array of interaction objects"]
  created_at DateTime 
  updated_at DateTime 

  indexes {
    created_at [name: 'created_at_index']
    (tags, created_at) [type: btree, note: 'Composite index for tags and creation date']
  }
}


Table notifications {
  id ObjectId [pk, unique]
  user_id ObjectId [ref: > users.id]
  type String 
  content String
  status String [note: "Values: 'read', 'unread'"]
  timestamp DateTime 

  indexes {
    user_id [name: 'user_notifications_index']
    (type, timestamp) [type: hash, note: 'Index for type and timestamp']
  }
}

Table communities {
  id ObjectId [pk, unique]
  name String
  description String
  type String [note: "Enum: 'Official', 'Community'"]
  icon String [note: "Optional community icon"]
  owner ObjectId [ref: > users.id]
  members JSONB [note: "Array of member objects with user_id and role_ids"]
  roles ObjectId[] [ref: > roles.id]
  discussions ObjectId[] [ref: > discussions.id]
  inviteLink String [note: "Optional invite link for the community"]
  createdAt DateTime
  updatedAt DateTime

  indexes {
    name [name: 'community_name_index']
    type [name: 'community_type_index']
  }
}

Table roles {
  id ObjectId [pk, unique]
  name String [note: "Name of the role, e.g., 'Admin', 'Moderator'"]
  communityId ObjectId [ref: > communities.id]
  color Int [note: "Color code for the role"]
  permissions Int [note: "Bitwise integer representing permissions"]
  mentionable Boolean [note: "Whether the role is mentionable in discussions"]
  createdAt DateTime

  indexes {
    communityId [name: 'community_roles_index']
    name [name: 'role_name_index']
  }
}


Table discussions {
  id ObjectId [pk, unique]
  title String
  content String
  creator ObjectId [ref: > users.id]
  attachments JSONB [note: "Array of attachment objects"]
  replies JSONB [note: "Embedded array of reply objects"]
  createdAt DateTime
  updatedAt DateTime
  communityId ObjectId [ref: > communities.id]

  indexes {
    communityId [name: 'community_discussion_index']
    createdAt [name: 'discussion_created_at_index']
  }
}
/*
// Embedded Attachment Structure in Discussions
attachments: [
  {
    type: String [note: "Values: 'document', 'file', 'poll', etc."],
    resource: String [note: "Link to the resource, e.g., a file or media"]
  }
]
// Embedded Reply Structure in Discussions
replies: [
  {
    id: ObjectId [pk, unique],
    content: String,
    creator: ObjectId [ref: > users.id],
    createdAt: DateTime,
    attachments: [
      {
        type: String [note: "Values: 'document', 'file', etc."],
        resource: String [note: "Link to the resource"]
      }
    ]
  }
]
*/

Table conversations {
  id ObjectId [pk, unique]
  type String [note: "Values: 'DM', 'GroupDM'"]
  participants ObjectId[] [note: "List of UserIds in the conversation"]
  name String [note: "Optional, used for GroupDMs"]
  createdBy ObjectId [ref: > users.id]
  inviteLink String [note: "Optional invite link for GroupDMs"]
  messages ObjectId[] [note: "References to MessageId, newest first"]
  createdAt DateTime
  updatedAt DateTime

  indexes {
    type [name: 'conversation_type_index']
    participants [type: btree, name: 'participants_index']
  }
}

Table messages {
  id ObjectId [pk, unique]
  senderId ObjectId [ref: > users.id]
  content String
  attachments JSONB [note: "Array of attachment objects"]
  createdAt DateTime

  indexes {
    senderId [name: 'message_sender_index']
  }
}
/*
// Embedded Attachment Structure in Messages
attachments: [
  {
    type: String [note: "Values: 'document', 'file', 'poll', 'thread', etc."],
    resource: String [note: "Link to the resource, e.g., a file or document"],
    thread: ObjectId [ref: > conversations.id, note: "Reference for thread type attachments"]
  }
]
*/